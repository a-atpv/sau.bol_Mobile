import SwiftUI

struct RecommendationView: View {
    @StateObject var viewModel: TestViewModel
    @State var healthFact = "–ø–æ–∫–∞ –≤—Ä–∞—á –ø–∏—à–µ—Ç –≤–∞–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –º–æ–≥—É —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –≤–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π"
    @State var isExpanded = false
    @State var adviceDidGenerated = false
    
    var body: some View {
        if viewModel.recommendation == nil {
            loadingView
        } else {
            recommendationView
        }
    }
    
    private var recommendationView: some View {
        NavigationView {
            ScrollView {
                VStack(alignment: .leading,spacing: 4) {
                    
                    Text(viewModel.recommendation?.intro ?? "")
                        .foregroundColor(.black)
                        .padding(.bottom, 20)
                    analysisView
                    habitView
                    
                    Text(viewModel.recommendation!.conclusion)
                        .padding(.vertical, 20)
                    
                    ExpandableView(question: "–ü–æ—á–µ–º—É –º–Ω–µ –Ω–∞–¥–æ —Å–¥–∞—Ç—å —ç—Ç–∏ –∞–Ω–∞–ª–∏–∑—ã?", answer: viewModel.recommendation?.explanation ?? "")
                        .padding(.bottom, 4)
                    
                    ExpandableView(question: "–ù–∞ —á–µ–º –æ—Å–Ω–æ–≤—ã–≤–∞—é—Ç—Å—è –≤–∞—à–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏?", answer: "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Å–Ω–æ–≤—ã–≤–∞—é—Ç—Å—è –Ω–∞ –æ—Ç–≤–µ—Ç–∞—Ö –Ω–∞ —Ç–µ—Å—Ç, –ø–æ—Å–ª–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å –ø–æ–º–æ—â—å—é –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞. –°—Ç–æ–∏—Ç –æ—Ç–Ω–æ—Å–∏—Ç—å—Å—è –∫ —Å–æ–≤–µ—Ç–∞–º —Å –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å—é, –ø–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ —Å–ª–µ–¥–æ–≤–∞—Ç—å —Å–æ–≤–µ—Ç–∞–º –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–π—Ç–µ—Å—å —Å –≤–∞—à–∏–º –≤—Ä–∞—á–æ–º")
                        .padding(.bottom, 4)
                }
                .padding()
            }
            .navigationBarBackButtonTitleHidden()
            .navigationBarBackButtonHidden(false)
        }
        .navigationBarBackButtonTitleHidden()
        .navigationBarBackButtonHidden(false)
    }
    
    private var habitView: some View {
        VStack(alignment: .leading){
            Text("–°–æ–≤–µ—Ç—É—é –≤–∞–º –≤–Ω–µ–¥—Ä–∏—Ç—å —ç—Ç–∏ –ø—Ä–∏–≤—ã—á–∫–∏")
                .font(.system(size: 20, weight: .semibold))
//                .frame(width: 300)
            
            ForEach(viewModel.recommendation!.habits, id: \.self) { habit in
                HStack(alignment: .top){
                    Text("üéØ" + habit)
                    Spacer()
                    Button {
                        viewModel.createHabit(habit: habit)
                    } label: {
                        Text("+")
                            .font(.system(size: 24, weight: .bold))
                            .foregroundColor(.black)
                    }
                }
            }
        }
    }
    private var analysisView: some View {
        VStack(alignment: .leading){
            Text("–í–∞–º —Å—Ç–æ–∏—Ç —Å–¥–∞—Ç—å —ç—Ç–∏ –∞–Ω–∞–ª–∏–∑—ã")
                .font(.system(size: 20, weight: .semibold))
            ForEach(viewModel.recommendation!.analysis, id: \.self) { analysis in
                Text("üß™" + analysis)
            }
        }
    }
    
    
    private var loadingView: some View {
        VStack {
            Image("nurse")
                .resizable()
                .frame(width: 150, height: 150)
                .scaledToFill()
                .clipShape(Circle())
            
            Text(healthFact)
                .foregroundColor(.black)
                .padding()
            
            CustomButton(text: adviceDidGenerated ? "–î–∞–≤–∞–π—Ç–µ –µ—â–µ!" : "–•–æ—á—É —É–∑–Ω–∞—Ç—å —Ñ–∞–∫—Ç") {
                healthFact = Advice.healthFacts.randomElement()!
                adviceDidGenerated = true
            }
            
            
            ProgressView()
                .progressViewStyle(CircularProgressViewStyle(tint: .black))
                .scaleEffect(1.5)
                .padding()
            
        }
    }
}

struct AdditionalInfoView: View {
    var question: String
    var info: String
    var body: some View {
        ZStack {
            RoundedRectangle(cornerRadius: 12)
                .foregroundColor(.red)
                .opacity(0.7)
                .shadow(color: .black, radius: 3)
            VStack {
                HStack {
                    Text(question)
                    Button {
                        ()
                    } label: {
                        Image(systemName: "location")
                    }
                    
                }
            }
        }
    }
}

//struct RecommendationView_Previews: PreviewProvider {
//    static var previews: some View {
//        RecommendationView()
//    }
//}
